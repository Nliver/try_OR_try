var (
	score    int
	isSliced bool
)

func throwBanana() {
	setXYpos rand(-200, 200), -200
	show
	isSliced = false
	// 向上抛物运动
	setPhysicsMode DynamicPhysics
	setGravity 1.5
	addImpulse rand(-900, 900), rand(-3500, -6000)
}

func sliceBanana() {
	if isSliced {
		return // 避免重复切割
	}

	isSliced = true
	broadcast "scoreAdd"

	// 停止物理运动
	setPhysicsMode NoPhysics

	// 先克隆右半部分（此时造型还是 watermelon）
	clone

	// 然后当前这个切换为左半部分
	setCostume "banana_sliced_1"
	// 向左移动一点，制造间隔
	changeXpos -15
	// 向左飞
	addImpulse -300, -200
	wait 0.5
	die
}

onStart => {
	score = 0
	throwBanana
}

onTouchStart "Banana", => {
	sliceBanana
}

onCloned => {
	// 判断是抛出的新西瓜还是切开的西瓜
	if costumeName == "banana" {
		// 检查是否是被切开后克隆的（用于创建右半部分）
		if isSliced {
			// 这是切开的右半部分
			setCostume "banana_sliced_2"
			setPhysicsMode NoPhysics
			// 向右移动一点，制造间隔
			changeXpos 15
			// 向右飞
			addImpulse 300, -200
			wait 0.5
			die
		} else {
			// 这是新抛出的西瓜
			throwBanana

			// 检测刀光轨迹的循环（只在新抛出的西瓜上运行）
			forever => {
				// 只有在可见、未被切割、且在屏幕内时才检测
				if visible && !isSliced && ypos > -250 && ypos < 250 {
					if mousePressed {
						// 计算鼠标与水果的距离
						distance := distanceTo(Mouse)
						if distance < 50 {
							// 如果鼠标在水果附近
							sliceBanana
						}
					}
				}

				// 如果已被切割或飞出屏幕，停止检测
				if isSliced || ypos < -250 {
					return
				}

				wait 0.01
			}
		}
	}
}
